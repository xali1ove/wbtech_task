/*Реализовать конкурентную запись данных в map.*/
package main

import (
	"fmt"
	"sync"
)

type SafeMap struct {
	m   map[int]int
	mux sync.Mutex
}

//Метод Write блокирует мьютекс, затем записывает значение в мапу и разблокирует мьютекс.
func (sm *SafeMap) Write(key, value int) {
	sm.mux.Lock()
	sm.m[key] = value
	sm.mux.Unlock()
}

func main() {
	//Создание экземпляра и запуск 100 горутин
	sm := &SafeMap{m: make(map[int]int)}

	//Записываем в map значение ключа в квадрате
	for i := 0; i < 100; i++ {
		go sm.Write(i, i*i)
	}

	// Добавим небольшую задержку, чтобы дать всем горутинам завершиться
	for i := 0; i < 100; i++ {
		fmt.Printf("%d:%d\n", i, sm.m[i])
	}
}

/*В Go мапа не потокобезопасна, т.е. при одновременной записи в неё из нескольких горутин может возникнуть состояние гонки (race condition),
что может привести к неожиданным результатам и ошибкам.
Для конкурентной записи данных в map можно использовать мьютексы (mutex).
Мьютекс - позволяет блокировать доступ к определенной части кода для того, чтобы только одна горутина могла изменять данные.
*/
