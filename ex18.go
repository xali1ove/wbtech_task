/*Реализовать структуру-счетчик, которая будет инкрементироваться в конкурентной среде.
По завершению программа должна выводить итоговое значение счетчика.*/

package main

import (
	"fmt"
	"sync"
)

type Counter struct {
	value int
	mux   sync.Mutex // мьютекс для синхронизации доступа к общему ресурсу
}

func (c *Counter) Increment() {
	c.mux.Lock()         // заблокировать мьютекс
	defer c.mux.Unlock() // гарантировать разблокировку мьютекса даже в случае паники или завершения функции
	c.value++            // инкрементировать значение счетчика
}

func main() {
	var wg sync.WaitGroup // используется для ожидания завершения всех горутин
	c := Counter{}
	for i := 0; i < 1000; i++ {
		wg.Add(1) // добавить одну горутину в WaitGroup
		go func() {
			defer wg.Done() // уменьшить счетчик горутин при завершении
			c.Increment()   // инкрементировать значение счетчика
		}()
	}
	wg.Wait() // ждать завершения всех горутин
	fmt.Println(c.value)
}
